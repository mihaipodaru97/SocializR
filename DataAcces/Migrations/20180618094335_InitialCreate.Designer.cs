// <auto-generated />
using DataAcces.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace DataAcces.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180618094335_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessEntities.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("PostId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BusinessEntities.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Friend", b =>
                {
                    b.Property<int>("User1Id");

                    b.Property<int>("User2Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("BusinessEntities.Entities.FriendRequest", b =>
                {
                    b.Property<int>("UserFromId");

                    b.Property<int>("UserToId");

                    b.HasKey("UserFromId", "UserToId");

                    b.HasIndex("UserToId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Like", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("PostId");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("Name");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Permission", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlbumId");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int?>("PostId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfLikes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Role", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BusinessEntities.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("PermissionId");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("BusinessEntities.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("CountyId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LocalityId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Privacy");

                    b.Property<byte[]>("ProfilePhoto");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LocalityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessEntities.Entities.UserInterest", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("InterestId");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterest");
                });

            modelBuilder.Entity("BusinessEntities.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Album", b =>
                {
                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Album_User");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Comment", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Comment_Post");

                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comment_User");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Friend", b =>
                {
                    b.HasOne("BusinessEntities.Entities.User", "User1")
                        .WithMany("FriendsUser1")
                        .HasForeignKey("User1Id")
                        .HasConstraintName("FK_Friends_User");

                    b.HasOne("BusinessEntities.Entities.User", "User2")
                        .WithMany("FriendsUser2")
                        .HasForeignKey("User2Id")
                        .HasConstraintName("FK_Friends_User1");
                });

            modelBuilder.Entity("BusinessEntities.Entities.FriendRequest", b =>
                {
                    b.HasOne("BusinessEntities.Entities.User", "UserFrom")
                        .WithMany("FriendRequestsUserFrom")
                        .HasForeignKey("UserFromId")
                        .HasConstraintName("FK_FriendRequest_User");

                    b.HasOne("BusinessEntities.Entities.User", "UserTo")
                        .WithMany("FriendRequestsUserTo")
                        .HasForeignKey("UserToId")
                        .HasConstraintName("FK_FriendRequest_User1");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Like", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Like_Post");

                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Like_User");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Locality", b =>
                {
                    b.HasOne("BusinessEntities.Entities.County", "County")
                        .WithMany("Localities")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FK_Locality_City");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Photo", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Album", "Album")
                        .WithMany("Photos")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Photo_Album");

                    b.HasOne("BusinessEntities.Entities.Post", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Photo_Post");

                    b.HasOne("BusinessEntities.Entities.User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BusinessEntities.Entities.Post", b =>
                {
                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_User");
                });

            modelBuilder.Entity("BusinessEntities.Entities.RolePermission", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("BusinessEntities.Entities.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermission_Role");
                });

            modelBuilder.Entity("BusinessEntities.Entities.User", b =>
                {
                    b.HasOne("BusinessEntities.Entities.County", "County")
                        .WithMany("Users")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FK_User_City");

                    b.HasOne("BusinessEntities.Entities.Locality", "Locality")
                        .WithMany("Users")
                        .HasForeignKey("LocalityId")
                        .HasConstraintName("FK_User_Locality");
                });

            modelBuilder.Entity("BusinessEntities.Entities.UserInterest", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Interest", "Interest")
                        .WithMany("UserInterest")
                        .HasForeignKey("InterestId")
                        .HasConstraintName("FK_UserInterest_Interest");

                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("UserInterest")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserInterest_User");
                });

            modelBuilder.Entity("BusinessEntities.Entities.UserRole", b =>
                {
                    b.HasOne("BusinessEntities.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("BusinessEntities.Entities.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User");
                });
#pragma warning restore 612, 618
        }
    }
}
